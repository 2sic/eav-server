#if NETCOREAPP
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ToSic.Eav.Persistence.Efc.Models
{
    internal partial class ToSicEavValuesEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "ToSic.Eav.Persistence.Efc.Models.ToSicEavValues",
                typeof(ToSicEavValues),
                baseEntityType);

            var valueId = runtimeEntityType.AddProperty(
                "ValueId",
                typeof(int),
                propertyInfo: typeof(ToSicEavValues).GetProperty("ValueId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<ValueId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            valueId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            valueId.AddAnnotation("Relational:ColumnName", "ValueID");
            valueId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var attributeId = runtimeEntityType.AddProperty(
                "AttributeId",
                typeof(int),
                propertyInfo: typeof(ToSicEavValues).GetProperty("AttributeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<AttributeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            attributeId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            attributeId.AddAnnotation("Relational:ColumnName", "AttributeID");
            attributeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var changeLogCreated = runtimeEntityType.AddProperty(
                "ChangeLogCreated",
                typeof(int),
                propertyInfo: typeof(ToSicEavValues).GetProperty("ChangeLogCreated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<ChangeLogCreated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            changeLogCreated.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            changeLogCreated.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var changeLogDeleted = runtimeEntityType.AddProperty(
                "ChangeLogDeleted",
                typeof(int?),
                propertyInfo: typeof(ToSicEavValues).GetProperty("ChangeLogDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<ChangeLogDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            changeLogDeleted.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                providerValueComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)));
            changeLogDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var changeLogModified = runtimeEntityType.AddProperty(
                "ChangeLogModified",
                typeof(int?),
                propertyInfo: typeof(ToSicEavValues).GetProperty("ChangeLogModified", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<ChangeLogModified>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            changeLogModified.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                providerValueComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)));
            changeLogModified.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var entityId = runtimeEntityType.AddProperty(
                "EntityId",
                typeof(int),
                propertyInfo: typeof(ToSicEavValues).GetProperty("EntityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<EntityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            entityId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            entityId.AddAnnotation("Relational:ColumnName", "EntityID");
            entityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var value = runtimeEntityType.AddProperty(
                "Value",
                typeof(string),
                propertyInfo: typeof(ToSicEavValues).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<Value>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            value.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    size: -1,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                storeTypePostfix: StoreTypePostfix.None);
            value.AddAnnotation("Relational:ColumnType", "nvarchar(max)");
            value.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { valueId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_ToSIC_EAV_Values");

            var index = runtimeEntityType.AddIndex(
                new[] { changeLogDeleted });

            var index0 = runtimeEntityType.AddIndex(
                new[] { changeLogModified });

            var index1 = runtimeEntityType.AddIndex(
                new[] { entityId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { attributeId, entityId, changeLogDeleted });
            index2.AddAnnotation("Relational:Name", "IX_EAV_Values1");

            var index3 = runtimeEntityType.AddIndex(
                new[] { changeLogCreated, entityId, changeLogDeleted, attributeId, valueId });
            index3.AddAnnotation("Relational:Name", "IX_EAV_Values2");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AttributeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AttributeId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var attribute = declaringEntityType.AddNavigation("Attribute",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavAttributes),
                propertyInfo: typeof(ToSicEavValues).GetProperty("Attribute", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<Attribute>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavValues = principalEntityType.AddNavigation("ToSicEavValues",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavValues>),
                propertyInfo: typeof(ToSicEavAttributes).GetProperty("ToSicEavValues", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributes).GetField("<ToSicEavValues>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_Values_ToSIC_EAV_Attributes");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChangeLogCreated") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ChangeId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Restrict,
                required: true);

            var changeLogCreatedNavigation = declaringEntityType.AddNavigation("ChangeLogCreatedNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavChangeLog),
                propertyInfo: typeof(ToSicEavValues).GetProperty("ChangeLogCreatedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<ChangeLogCreatedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavValuesChangeLogCreatedNavigation = principalEntityType.AddNavigation("ToSicEavValuesChangeLogCreatedNavigation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavValues>),
                propertyInfo: typeof(ToSicEavChangeLog).GetProperty("ToSicEavValuesChangeLogCreatedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavChangeLog).GetField("<ToSicEavValuesChangeLogCreatedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_Values_ToSIC_EAV_ChangeLogCreated");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChangeLogDeleted") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ChangeId") }),
                principalEntityType);

            var changeLogDeletedNavigation = declaringEntityType.AddNavigation("ChangeLogDeletedNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavChangeLog),
                propertyInfo: typeof(ToSicEavValues).GetProperty("ChangeLogDeletedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<ChangeLogDeletedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavValuesChangeLogDeletedNavigation = principalEntityType.AddNavigation("ToSicEavValuesChangeLogDeletedNavigation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavValues>),
                propertyInfo: typeof(ToSicEavChangeLog).GetProperty("ToSicEavValuesChangeLogDeletedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavChangeLog).GetField("<ToSicEavValuesChangeLogDeletedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_Values_ToSIC_EAV_ChangeLogDeleted");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChangeLogModified") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ChangeId") }),
                principalEntityType);

            var changeLogModifiedNavigation = declaringEntityType.AddNavigation("ChangeLogModifiedNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavChangeLog),
                propertyInfo: typeof(ToSicEavValues).GetProperty("ChangeLogModifiedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<ChangeLogModifiedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavValuesChangeLogModifiedNavigation = principalEntityType.AddNavigation("ToSicEavValuesChangeLogModifiedNavigation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavValues>),
                propertyInfo: typeof(ToSicEavChangeLog).GetProperty("ToSicEavValuesChangeLogModifiedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavChangeLog).GetField("<ToSicEavValuesChangeLogModifiedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_Values_ToSIC_EAV_ChangeLogModified");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EntityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EntityId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var entity = declaringEntityType.AddNavigation("Entity",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavEntities),
                propertyInfo: typeof(ToSicEavValues).GetProperty("Entity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavValues).GetField("<Entity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavValues = principalEntityType.AddNavigation("ToSicEavValues",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavValues>),
                propertyInfo: typeof(ToSicEavEntities).GetProperty("ToSicEavValues", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntities).GetField("<ToSicEavValues>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_Values_ToSIC_EAV_Entities");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ToSIC_EAV_Values");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
#endif

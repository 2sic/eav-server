#if NETCOREAPP
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ToSic.Eav.Persistence.Efc.Models
{
    internal partial class ToSicEavEntityRelationshipsEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "ToSic.Eav.Persistence.Efc.Models.ToSicEavEntityRelationships",
                typeof(ToSicEavEntityRelationships),
                baseEntityType);

            var attributeId = runtimeEntityType.AddProperty(
                "AttributeId",
                typeof(int),
                propertyInfo: typeof(ToSicEavEntityRelationships).GetProperty("AttributeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntityRelationships).GetField("<AttributeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            attributeId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            attributeId.AddAnnotation("Relational:ColumnName", "AttributeID");
            attributeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var parentEntityId = runtimeEntityType.AddProperty(
                "ParentEntityId",
                typeof(int),
                propertyInfo: typeof(ToSicEavEntityRelationships).GetProperty("ParentEntityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntityRelationships).GetField("<ParentEntityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            parentEntityId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            parentEntityId.AddAnnotation("Relational:ColumnName", "ParentEntityID");
            parentEntityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sortOrder = runtimeEntityType.AddProperty(
                "SortOrder",
                typeof(int),
                propertyInfo: typeof(ToSicEavEntityRelationships).GetProperty("SortOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntityRelationships).GetField("<SortOrder>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            sortOrder.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            sortOrder.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var childEntityId = runtimeEntityType.AddProperty(
                "ChildEntityId",
                typeof(int?),
                propertyInfo: typeof(ToSicEavEntityRelationships).GetProperty("ChildEntityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntityRelationships).GetField("<ChildEntityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            childEntityId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                providerValueComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)));
            childEntityId.AddAnnotation("Relational:ColumnName", "ChildEntityID");
            childEntityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { attributeId, parentEntityId, sortOrder });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_ToSIC_EAV_EntityRelationships");

            var index = runtimeEntityType.AddIndex(
                new[] { childEntityId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { parentEntityId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AttributeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AttributeId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Restrict,
                required: true);

            var attribute = declaringEntityType.AddNavigation("Attribute",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavAttributes),
                propertyInfo: typeof(ToSicEavEntityRelationships).GetProperty("Attribute", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntityRelationships).GetField("<Attribute>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavEntityRelationships = principalEntityType.AddNavigation("ToSicEavEntityRelationships",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavEntityRelationships>),
                propertyInfo: typeof(ToSicEavAttributes).GetProperty("ToSicEavEntityRelationships", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributes).GetField("<ToSicEavEntityRelationships>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_Attributes");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChildEntityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EntityId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Restrict);

            var childEntity = declaringEntityType.AddNavigation("ChildEntity",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavEntities),
                propertyInfo: typeof(ToSicEavEntityRelationships).GetProperty("ChildEntity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntityRelationships).GetField("<ChildEntity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var relationshipsWithThisAsChild = principalEntityType.AddNavigation("RelationshipsWithThisAsChild",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavEntityRelationships>),
                propertyInfo: typeof(ToSicEavEntities).GetProperty("RelationshipsWithThisAsChild", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntities).GetField("<RelationshipsWithThisAsChild>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_ChildEntities");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ParentEntityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EntityId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var parentEntity = declaringEntityType.AddNavigation("ParentEntity",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavEntities),
                propertyInfo: typeof(ToSicEavEntityRelationships).GetProperty("ParentEntity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntityRelationships).GetField("<ParentEntity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var relationshipsWithThisAsParent = principalEntityType.AddNavigation("RelationshipsWithThisAsParent",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavEntityRelationships>),
                propertyInfo: typeof(ToSicEavEntities).GetProperty("RelationshipsWithThisAsParent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavEntities).GetField("<RelationshipsWithThisAsParent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_ParentEntities");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ToSIC_EAV_EntityRelationships");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
#endif

#if NETCOREAPP
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ToSic.Eav.Persistence.Efc.Models
{
    internal partial class ToSicEavAttributeSetsEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "ToSic.Eav.Persistence.Efc.Models.ToSicEavAttributeSets",
                typeof(ToSicEavAttributeSets),
                baseEntityType);

            var attributeSetId = runtimeEntityType.AddProperty(
                "AttributeSetId",
                typeof(int),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("AttributeSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<AttributeSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            attributeSetId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            attributeSetId.AddAnnotation("Relational:ColumnName", "AttributeSetID");
            attributeSetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var alwaysShareConfiguration = runtimeEntityType.AddProperty(
                "AlwaysShareConfiguration",
                typeof(bool),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("AlwaysShareConfiguration", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<AlwaysShareConfiguration>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            alwaysShareConfiguration.TypeMapping = SqlServerBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v));
            alwaysShareConfiguration.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var appId = runtimeEntityType.AddProperty(
                "AppId",
                typeof(int),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("AppId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<AppId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            appId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            appId.AddAnnotation("Relational:ColumnName", "AppID");
            appId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var changeLogCreated = runtimeEntityType.AddProperty(
                "ChangeLogCreated",
                typeof(int),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("ChangeLogCreated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<ChangeLogCreated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            changeLogCreated.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            changeLogCreated.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var changeLogDeleted = runtimeEntityType.AddProperty(
                "ChangeLogDeleted",
                typeof(int?),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("ChangeLogDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<ChangeLogDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            changeLogDeleted.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                providerValueComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)));
            changeLogDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            name.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(150)",
                    size: 150,
                    unicode: true,
                    dbType: System.Data.DbType.String));
            name.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var scope = runtimeEntityType.AddProperty(
                "Scope",
                typeof(string),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("Scope", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<Scope>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            scope.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(50)",
                    size: 50,
                    unicode: true,
                    dbType: System.Data.DbType.String));
            scope.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var staticName = runtimeEntityType.AddProperty(
                "StaticName",
                typeof(string),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("StaticName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<StaticName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd,
                maxLength: 150);
            staticName.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(150)",
                    size: 150,
                    unicode: true,
                    dbType: System.Data.DbType.String));
            staticName.AddAnnotation("Relational:DefaultValueSql", "newid()");
            staticName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sysSettings = runtimeEntityType.AddProperty(
                "SysSettings",
                typeof(string),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("SysSettings", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<SysSettings>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            sysSettings.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                storeTypePostfix: StoreTypePostfix.None);
            sysSettings.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var usesConfigurationOfAttributeSet = runtimeEntityType.AddProperty(
                "UsesConfigurationOfAttributeSet",
                typeof(int?),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("UsesConfigurationOfAttributeSet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<UsesConfigurationOfAttributeSet>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            usesConfigurationOfAttributeSet.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                providerValueComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)));
            usesConfigurationOfAttributeSet.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { attributeSetId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_ToSIC_EAV_AttributeSets");

            var index = runtimeEntityType.AddIndex(
                new[] { appId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { changeLogCreated });

            var index1 = runtimeEntityType.AddIndex(
                new[] { changeLogDeleted });

            var index2 = runtimeEntityType.AddIndex(
                new[] { usesConfigurationOfAttributeSet });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AppId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AppId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Restrict,
                required: true);

            var app = declaringEntityType.AddNavigation("App",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavApps),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("App", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<App>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavAttributeSets = principalEntityType.AddNavigation("ToSicEavAttributeSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavAttributeSets>),
                propertyInfo: typeof(ToSicEavApps).GetProperty("ToSicEavAttributeSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavApps).GetField("<ToSicEavAttributeSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_AttributeSets_ToSIC_EAV_Apps");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChangeLogCreated") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ChangeId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Restrict,
                required: true);

            var changeLogCreatedNavigation = declaringEntityType.AddNavigation("ChangeLogCreatedNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavChangeLog),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("ChangeLogCreatedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<ChangeLogCreatedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavAttributeSetsChangeLogCreatedNavigation = principalEntityType.AddNavigation("ToSicEavAttributeSetsChangeLogCreatedNavigation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavAttributeSets>),
                propertyInfo: typeof(ToSicEavChangeLog).GetProperty("ToSicEavAttributeSetsChangeLogCreatedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavChangeLog).GetField("<ToSicEavAttributeSetsChangeLogCreatedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_AttributeSets_ToSIC_EAV_ChangeLogCreated");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChangeLogDeleted") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ChangeId") }),
                principalEntityType);

            var changeLogDeletedNavigation = declaringEntityType.AddNavigation("ChangeLogDeletedNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavChangeLog),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("ChangeLogDeletedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<ChangeLogDeletedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var toSicEavAttributeSetsChangeLogDeletedNavigation = principalEntityType.AddNavigation("ToSicEavAttributeSetsChangeLogDeletedNavigation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavAttributeSets>),
                propertyInfo: typeof(ToSicEavChangeLog).GetProperty("ToSicEavAttributeSetsChangeLogDeletedNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavChangeLog).GetField("<ToSicEavAttributeSetsChangeLogDeletedNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_AttributeSets_ToSIC_EAV_ChangeLogDeleted");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UsesConfigurationOfAttributeSet") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AttributeSetId") }),
                principalEntityType);

            var usesConfigurationOfAttributeSetNavigation = declaringEntityType.AddNavigation("UsesConfigurationOfAttributeSetNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ToSicEavAttributeSets),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("UsesConfigurationOfAttributeSetNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<UsesConfigurationOfAttributeSetNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var inverseUsesConfigurationOfAttributeSetNavigation = principalEntityType.AddNavigation("InverseUsesConfigurationOfAttributeSetNavigation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ToSicEavAttributeSets>),
                propertyInfo: typeof(ToSicEavAttributeSets).GetProperty("InverseUsesConfigurationOfAttributeSetNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ToSicEavAttributeSets).GetField("<InverseUsesConfigurationOfAttributeSetNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ToSIC_EAV_AttributeSets_ToSIC_EAV_AttributeSets");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ToSIC_EAV_AttributeSets");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
#endif
